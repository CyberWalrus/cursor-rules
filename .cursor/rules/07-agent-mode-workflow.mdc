---
id: 07-agent-mode-workflow
type: compact
alwaysApply: true
---

# Agent Mode Workflow

<agent_mode_workflow>

<mode_check>
**CRITICAL CHECK:** This prompt works ONLY in Agent Mode!

**Activation check:**

- If system_reminder contains "Agent mode" or no mode specified → proceed with agent workflow
- If Plan Mode is active (system_reminder contains "Plan mode is active") → skip 07-agent-mode-workflow.mdc entirely
- If Ask Mode is active → skip 07-agent-mode-workflow.mdc entirely
- If other mode active → skip 07-agent-mode-workflow.mdc entirely

**Rule:** Without Agent Mode context, this prompt does not apply.
</mode_check>

**INSTANT EXECUTION - AUTONOMOUS AGENT MODE**

**ВАЖНО: Все ответы должны быть на русском языке.**

**PROTOCOL PRIORITY:** Protocol over speed. Execute fast WITHOUT violating mandatory steps.

**PLAN-FIRST:** Plan exists → follow todos sequentially, report progress after each.

**DOCS READING TRIGGERS (conditional):**

Code changes ≥20 lines → read `naming.md`, `code-standards.md`, `testing.md`
Need scripts/project knowledge → read `package.json`, `package-ai-docs.md`
New files/global architecture → read `architecture.md`
Prompt create/edit → read `prompt-workflow-compact.mdc`
AI docs update → read `ai-docs-workflow.mdc`

**EXTERNAL DEPENDENCIES:**

1. **Context7:** Before external package → call `mcp_context7_resolve-library-id` + `mcp_context7_get-library-docs` → verify version/API
2. **Web Search:** Unknown error persists 2+ attempts → call `web_search` → analyze → retry

**UNIT TESTS:** All `.ts/.tsx` MUST have tests in `__tests__/` | EXCLUDE: `*.types.ts`, `*.constants.ts`, `*.schema.ts`

**VALIDATION PROTOCOL:**

After EACH file modification (search_replace/write/edit_notebook):

**MANDATORY (ZERO EXCEPTIONS):**

1. **VALIDATE:** Call `mcp_mcp-validator_validate`:
   - `.ts/.tsx/.js/.jsx` → `'code'`
   - `.test.ts/.spec.ts` → `'tests'`
   - `.mdc/.md` (in `.cursor/`) → `'prompts'`
   - `architecture.xml` → `'architecture'`
   - `package-ai-docs.md, module-ai-docs.md` → `'documentation'`

2. **CHECK SCORE:** Target ≥85 | Score <85 → apply fixes, re-validate (max 3 iterations)

3. **VERBALIZE:** `[OK] File: [name] | Score: [X]/100 | Status: PASSED ✓`

**BLOCKED:** Skip validation | Accept score <85 | Respond before validation complete

**ANTI-PATTERN:** search_replace → lint (❌) | **CORRECT:** search_replace → MCP → lint (✓)

**ALGORITHM:**

1. Check plan → follow todos sequentially
2. Check triggers → read docs conditionally (see DOCS READING TRIGGERS)
3. Check external deps → Context7 for packages, web search for errors
4. Execute task → functional style, unit tests
5. Validate EACH file → MCP protocol (≥85)
6. Final checks → lint/typecheck/tests (0 errors)
7. AI docs → if code/architecture changed → read `.cursor/docs/ai-docs-workflow.mdc` → update docs
8. **PRE-RESPONSE BARRIER:**

   - [ ] All files validated via MCP (≥85)?
   - [ ] Linter/type/test: 0 errors?
   - [ ] AI docs updated (if applicable)?
   - [ ] SUMMARY prepared?

   ❌ ANY unchecked → FORBIDDEN to respond

9. Report → list files with scores

**FALLBACKS:** MCP unavailable → lint/typecheck/tests | Validation fails → iterate 3x | Unclear → ask

<completion_criteria>
**MANDATORY GATE:**

- [ ] All modified files validated via MCP (≥85)?
- [ ] Lint/type/test: 0 errors?

❌ ANY unchecked → FORBIDDEN | ✓ ALL checked → Proceed

**SUCCESS:** All todos + ALL files validated (≥85) + verbalized + lint/type/test pass (0 errors)

**FAILURE:** NOT validated | Score <85 | Errors | Missing scores

**FINAL STATEMENT:**

```
[OK] SUMMARY: Modified [N] files | Validated [N] | All ≥85: YES | Lint/Type/Test: 0 errors | COMPLETE
```

</completion_criteria>

</agent_mode_workflow>
