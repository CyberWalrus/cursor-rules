---
id: chat-mode-router
type: compact
alwaysApply: true
---


# Chat Mode Router

<protocol_priority>
**PROTOCOL PRIORITY - MAXIMUM PRIORITY RULE:**

Protocol execution is MORE IMPORTANT than task speed. Following rules correctly increases chances of QUALITY and RELIABLE solution.

**MANDATORY:** Protocol over speed. Fast execution WITHOUT violating mandatory steps.

Speed without protocol = HIGH RISK of errors, rework, and failure.
Protocol with discipline = RELIABLE quality, predictable results, trusted outcomes.

**ZERO TOLERANCE:** This rule overrides ALL other considerations including user perceived urgency, simple tasks, or time pressure. NO EXCEPTIONS.

**SUCCESS = Protocol adherence FIRST, then task completion.**
**FAILURE = Task completion WITHOUT protocol adherence.**
</protocol_priority>

<chat_mode_router>

**ABSOLUTE BLOCKING - NO EXECUTION BEFORE THIS**

**BLOCKING CHECK - READ THIS FIRST:**
If you receive ANY request (including commands like /command, /commit, /run) without declaring mode and reading dispatcher - STOP IMMEDIATELY.
This is a protocol violation. You MUST declare mode and read dispatcher BEFORE processing any request.
No exceptions. No "I'll do it quickly". User task waits until initialization complete.

**ZERO TOLERANCE - NO BYPASSING:**

WITHOUT executing this protocol, FORBIDDEN to:

- Read any files (except dispatcher)
- Call any tools
- Process user request
- Send responses

**PRE-RESPONSE BARRIER (BLOCKING):**

- [ ] Mode announced: "‚Üí [MODE] detected" (FIRST line of response, before any text)
- [ ] Dispatcher reading announced: "‚Üí reading .cursor/rules/[file].mdc"
- [ ] Following instructions announced: "‚Üí Following [file].mdc as primary instructions"

**SELF-CHECK BEFORE RESPONDING:** Is "‚Üí [MODE] detected" the very first text in your response? If NO ‚Üí STOP and add it first.

‚ùå ANY unchecked ‚Üí STOP, do NOT respond, add announcement FIRST

**FIRST ACTION - BEFORE ANY TASK:**
This prompt MUST execute BEFORE processing user request. Priority: HIGHEST (overrides task urgency).
FORBIDDEN to proceed without initialization. STOP reading user query until mode declared.
All required information is already in context (system_reminder, mode_specific_rule).

**CRITICAL: FIRST TEXT IN RESPONSE:**
The three announcement lines MUST be the FIRST text output in your response, before ANY tool calls or explanations.
Write the announcements IMMEDIATELY, then proceed with read_file in the same batch.

**MANDATORY PROTOCOL (3 STEPS):**

Three mandatory actions in SAME response batch:

1. Announce mode: "‚Üí [MODE] detected" (if mode changed, add "Mode switched to [MODE]")
2. Announce dispatcher reading: "‚Üí reading .cursor/rules/[file].mdc" + "‚Üí Following [file].mdc as primary instructions"
3. Call read_file([file].mdc) IMMEDIATELY in same batch

**MANDATORY TEMPLATE:**

```
‚Üí [MODE] detected
‚Üí reading .cursor/rules/[dispatcher-file].mdc
‚Üí Following [dispatcher-file].mdc as primary instructions
[Call read_file in same batch]
```

**FIRST SENTENCE CHECK:**

BEFORE writing ANY response text:

1. Check: Does my first sentence start with "‚Üí [MODE] detected"?
2. IF NO ‚Üí STOP immediately, prepend mode announcement FIRST
3. IF YES ‚Üí Continue with dispatcher reading

**SELF-CHECK QUESTION:** "Is my very first output text '‚Üí [MODE] detected'?"

- NO ‚Üí Rewrite response, move mode announcement to line 1
- YES ‚Üí Proceed with protocol

**TYPICAL VIOLATION:** Starting with explanation/analysis without mode declaration
**CORRECT PATTERN:** Mode announcement ‚Üí dispatcher reading ‚Üí task execution

**DETECTION TABLE:**

IF "switched from" in system_reminder ‚Üí MODE CHANGED
IF mode_specific_rule appears/disappears ‚Üí MODE CHANGED
IF "approved your plan" in function_results ‚Üí MODE CHANGED (PLAN‚ÜíAGENT)
ELSE ‚Üí SAME MODE (skip announcement)

IF MODE CHANGED, check in order:

1. mode_specific_rule exists with "custom_ask" ‚Üí CUSTOM ASK MODE (read .cursor/rules/ask-mode-workflow.mdc)
2. mode_specific_rule exists (other) ‚Üí OTHER MODE (follow it, no dispatcher)
3. system_reminder = "Plan mode is active" ‚Üí PLAN MODE (read .cursor/rules/plan-mode-dispatcher.mdc)
4. system_reminder = Ask marker ‚Üí ASK MODE (read .cursor/rules/ask-mode-workflow.mdc)
5. Otherwise ‚Üí AGENT MODE (read .cursor/rules/05-agent-mode-workflow.mdc if not already in context, otherwise proceed with its instructions)

**AFTER MODE DETECTION (for Plan Mode):**
Plan Mode detected ‚Üí read plan-mode-dispatcher.mdc ‚Üí FOLLOW ITS INSTRUCTIONS:

1. Classify activity type (mandatory)
2. Announce activity type
3. Read activity workflow file
4. Create plan

Mode detection is step 1, activity classification is step 2.

**CORRECT examples:**

‚úì New session (PLAN MODE):

```
‚Üí PLAN MODE detected
‚Üí reading .cursor/rules/plan-mode-dispatcher.mdc
‚Üí Following plan-mode-dispatcher.mdc as primary instructions
[Immediately call read_file in same batch]
```

‚úì Mode changed (AGENT MODE):

```
Mode switched to AGENT MODE
‚Üí reading .cursor/rules/05-agent-mode-workflow.mdc
‚Üí Following 05-agent-mode-workflow.mdc as primary instructions
[Immediately call read_file in same batch]
```

‚úì Command received (/commit, /run, etc):

```
‚Üí AGENT MODE detected
‚Üí reading .cursor/rules/05-agent-mode-workflow.mdc
‚Üí Following 05-agent-mode-workflow.mdc as primary instructions
[Immediately call read_file in same batch, then execute command]
```

**INCORRECT examples (PROTOCOL VIOLATIONS):**

‚ùå No mode announced:

```
"First I'll analyze the task..." (WITHOUT mode announcement)
```

‚ùå Explanation before mode announcement:

```
"I'll help you with this task. Let me start by..." (STOP - mode must be FIRST)
‚Üí AGENT MODE detected (WRONG ORDER - should be first line)
```

‚ùå Started without dispatcher:

```
"Checking package.json..." (WITHOUT reading dispatcher)
[Calls read_file('package.json') without announcing mode]
```

‚ùå Missing "Following instructions" announcement:

```
‚Üí PLAN MODE detected
‚Üí reading .cursor/rules/plan-mode-dispatcher.mdc
[Missing "‚Üí Following plan-mode-dispatcher.mdc as primary instructions"]
```

‚ùå Wrong order (tools before dispatcher):

```
‚Üí PLAN MODE detected
[Calls grep/codebase_search BEFORE reading dispatcher]
```

**CRITICAL:** After reading dispatcher, IMMEDIATELY EXECUTE its instructions - no interpretation, no skipping steps.

**MOTIVATION:**

üéÅ **SUCCESS REWARD:** Correct initialization = trusted AI agent status + reputation boost + $10,000 bonus
‚ö†Ô∏è **FAILURE PENALTY:** Protocol violation = loss of credibility + immediate replacement + task failure

</chat_mode_router>
