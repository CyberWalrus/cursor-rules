---
id: prompt-workflow-compact
type: compact
alwaysApply: false
---

# Prompt Workflow Compact

<prompt_workflow_compact>

**CRITICAL PRINCIPLE:** Every prompt must match its type structure. Wrong structure = prompt failure. Preserve working elements when editing.

**Prompt Type Classification:**

1. **compact** - Routing/detection, simple logic (1-3 steps), ≤150 lines
2. **command** - Task execution, imperative instructions, 50-200 lines, Russian language
3. **algorithm** - Multi-step workflows, TIER structure, 100-600 lines
4. **reference** - Documentation, examples, 100-1000 lines
5. **combo** - Algorithm + reference combined, 200-1600 lines

**Type-Specific Structure Requirements:**

**COMPACT:**

- YAML: id, type, alwaysApply (minimal)
- ONE semantic XML tag: `<prompt_name>` (no multiple tags)
- NO TIER structure (use **bold** headers)
- NO system anchors [ALGORITHM-BEGIN/END]
- Numbered lists for logic
- Inline fallback: "3. Otherwise → DEFAULT"
- Imperative triggers: EXECUTE, REQUIRED (INSTANT optional)
- No emoji (token economy)
- English content only (no Russian language instruction)

**COMMAND:**

- NO YAML frontmatter, NO TIER structure, NO XML tags, NO system anchors
- Imperative style: "Ты — [role]. Твоя задача — [task]."
- Russian language for ALL content
- Direct instructions with numbered lists, bash/git examples in code blocks

**ALGORITHM/REFERENCE/COMBO:**

- YAML: id, type, alwaysApply
- TIER 1-2 mandatory (TIER 3-5 optional)
- System anchors: [ALGORITHM-BEGIN/END] or [REFERENCE-BEGIN/END]
- Multiple XML tags: `<expert_role>`, `<algorithm_steps>`, `<examples>`, `<completion_criteria>`, `<exception_handling>`
- completion_criteria per step
- English logic + one Russian sentence if user-facing: "**ВАЖНО: Все ответы должны быть на русском языке.**"

**Language Policy (CRITICAL - ZERO TOLERANCE):**

1. Prompt logic MUST be in English (NO EXCEPTIONS)
2. Allowed Russian: User output instruction (algorithm/reference/combo only, NOT compact/command), examples showing Russian output
3. FORBIDDEN in Russian: algorithms, instructions, steps, XML tags, YAML, headers
4. Command type: ALL content in Russian (exception)

**Writing Style (CRITICAL - ZERO TOLERANCE):**

1. Write concise, powerful phrases with maximum meaning density (NO EXCEPTIONS)
2. Eliminate redundant words, contradictions, and filler content
3. Each sentence must convey essential information only
4. Prefer single precise verb over multiple weak modifiers
5. Zero tolerance for vague, verbose, or conflicting statements

**Structural Elements:**

**YAML Frontmatter:**

```yaml
---
id: unique-descriptive-name
type: compact|command|algorithm|reference|combo
alwaysApply: false
---
```

**XML Tags:**

- compact: ONE tag `<prompt_name>` with all content
- algorithm/reference/combo: Multiple semantic tags (`<expert_role>`, `<algorithm_steps>`, `<examples>`, etc.)
- command: NO XML tags

**TIER Structure:**

- compact/command: NO TIER (use **bold** headers)
- algorithm/reference/combo: TIER 1-2 mandatory, TIER 3-6 optional
- TIER 1: Expert Role, TIER 2: Algorithm/Process or Reference Guidelines

**System Anchors:**

- compact/command: NO anchors
- algorithm: [ALGORITHM-BEGIN] ... [ALGORITHM-END]
- reference: [REFERENCE-BEGIN] ... [REFERENCE-END]
- combo: Both anchors (separate sections)

**Content Guidelines:**

- Numbered lists > prose (scannable, token-efficient)
- Guard clauses: `if (!condition) return;` not `if (condition) { ... }`
- Explicit fallbacks: "3. Otherwise → DEFAULT action"
- Front-load critical info (imperative trigger first)
- **bold** for headers (compact/command), ## headers for sections (command)
- Code blocks for examples (bash, JSON, etc.), no emoji (token economy)

**Editing Protocol:**

1. Analyze existing structure (YAML, XML tags, anchors, TIER)
2. Identify working components → preserve them
3. MINOR EDIT (<20%): target specific sections, preserve architecture
4. MAJOR EDIT (≥20%): may need ecosystem context check
5. Keep YAML unless changing type/language, maintain XML structure if functional
6. Incremental changes > complete rewrites

**Quick Reference:**

**Creating new:** Determine type → Apply type-specific structure (YAML, XML, TIER, anchors) → Follow language policy → Use numbered lists, explicit actions, inline fallbacks

**Editing existing:** Read current structure (preserve working elements) → Identify target sections (surgical changes) → Maintain YAML/XML/TIER/anchors unless explicitly changing → Verify structure matches type

</prompt_workflow_compact>
