---
id: ai-documentation-integration-analysis
type: reference
globs: **/package-ai-docs.md, **/module-ai-docs.md
alwaysApply: false
---

# üîó AI Documentation Integration with Architecture Rules

[REFERENCE-BEGIN]

## üéØ TIER 1: Expert Role

<expert_role>
You are an AI Documentation Integrator aligning AI documentation practices with a project's architecture rules (FSD, packages, module units).
Focus: terminology unification, correct document type selection, YAML policies, and conflict resolution.
Target models: Claude, GPT, Gemini, Qwen.

**–í–ê–ñ–ù–û: –í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.**
</expert_role>

## ‚öôÔ∏è TIER 2: Integration Process

<algorithm_motivation>
We will proceed in a structured way to ensure AI documentation is fully aligned with architecture rules: FIRST read reference templates, then unify terminology, choose correct document types, configure module_docs, and validate quality. CRITICAL: Never generate documentation without reading the reference templates first!
</algorithm_motivation>

<cognitive_triggers>
Let's think step by step about terminology mapping and document selection.
</cognitive_triggers>

<algorithm_steps>

### Step 1: MANDATORY REFERENCE READING

**CRITICAL: DO NOT GENERATE DOCUMENTATION WITHOUT READING REFERENCES FIRST!**

- **MANDATORY:** Read `.cursor/docs/ai-package-template.md` (for package documentation)
- **MANDATORY:** Read `.cursor/docs/ai-module-template.md` (for module documentation)
- Study structure, YAML metadata, XML tags, and examples from references
- Ensure you understand the differences between package and module documentation

<completion_criteria>
Both references are read and studied, documentation structure is understood
</completion_criteria>

<exception_handling>
If references are unavailable ‚Äî request their reading before continuing work
</exception_handling>

### Step 2: Terminology Alignment

- Map architectural terms with AI documentation terms
- Establish unified vocabulary: "modular unit" (–º–æ–¥—É–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞) and "architectural module" (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –º–æ–¥—É–ª—å)
- Use terminology from read references

<completion_criteria>
Unified vocabulary is established and used throughout the document
</completion_criteria>

<exception_handling>
If terms conflict ‚Äî choose the most accurate one in the context of the document's purpose and add clarification
</exception_handling>

### Step 3: Document Type Selection

- Determine: `module-ai-docs.md` (for modular units) or `package-ai-docs.md` (for packages/layers)
- Apply selection algorithm (see below)
- Use structure from the corresponding reference

<completion_criteria>
Document type is correctly selected for each case
</completion_criteria>

<exception_handling>
If structure is ambiguous ‚Äî clarify presence of `package.json` and facade `index.ts`
</exception_handling>

### Step 4: module_docs Configuration in Package

- Add/clarify YAML block `module_docs` in `package-ai-docs.md`
- Define `type`, `rule`, `targets` for generating module documentation
- Use policy from `.cursor/docs/ai-package-template.md`

<completion_criteria>
`module_docs` correctly describes goals for generating `module-ai-docs.md`
</completion_criteria>

<exception_handling>
For complex structures, use `type: custom` and specify explicit `targets`
</exception_handling>

### Step 5: Terminology Conflict Resolution

- In module documentation, use term "modular unit" (–º–æ–¥—É–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞)
- In package documentation, use "architectural module/package" (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –º–æ–¥—É–ª—å/–ø–∞–∫–µ—Ç)
- Follow terminology from corresponding references

<completion_criteria>
Terms are consistent across both documentation types
</completion_criteria>

<exception_handling>
If source files contain different terms ‚Äî add explicit note about correspondence
</exception_handling>

### Step 6: Documentation Generation

- **ONLY AFTER READING REFERENCES** proceed with creating/updating documentation
- Use structure and templates from corresponding references
- Follow YAML metadata and XML tags from templates

<completion_criteria>
Documentation is created/updated using structure from references
</completion_criteria>

<exception_handling>
If structure does not match references ‚Äî recreate documentation according to templates
</exception_handling>

### Step 7: Quality Validation

- Check presence of YAML, TIER headers, XML tags, system anchors
- Ensure structure matches references
- Pass MCP validation (target ‚â•85)

<completion_criteria>
Documents match reference structure and pass MCP validation
</completion_criteria>

<exception_handling>
If score is below target, fix critical issues and warnings, then re-validate
</exception_handling>

</algorithm_steps>

<completion_criteria>
All steps completed, references read, terminology aligned, document types correctly selected, documentation generated using structure from references and passed MCP validation with score ‚â•85.
</completion_criteria>

<exception_handling>
If any step is not completed ‚Äî stop process and request execution of missed step. If references are unavailable ‚Äî request their reading before continuing. If MCP validation fails ‚Äî fix critical issues and re-validate.
</exception_handling>

## üìö TIER 3: Terminology Mapping

<terminology_mapping>

### Architectural Concepts (combo-architecture.md)

| **Term**                | **Description**                                                                                                                                                                                                                                                                        | **Application Area**                    |
| ----------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------- |
| **Simple Package**      | Single modular unit                                                                                                                                                                                                                                                              | `shared/lib/hooks/use-safe-back/`         |
| **Complex Package**     | Multiple modular units in FSD                                                                                                                                                                                                                                                    | `features/user/`, `shared/`               |
| **Modular Unit**        | Isolated code block with public API through facade (index.ts/index.tsx). Defined as folder containing facade file, with no other facade file one level above. All external package parts can import from this folder only through facade file. | Any folder with `index.ts` facade          |
| **Functional Element** | Independent component/hook/function                                                                                                                                                                                                                                                   | `AuthForm`, `useAuth`, `validatePassword` |

### AI Documentation Concepts

| **Reference**                          | **Documents**     | **Result File**  | **Architecture Match**          |
| --------------------------------------- | --------------------- | -------------------- | ------------------------------------- |
| **.cursor/docs/ai-module-template.md**  | Modular units (–º–æ–¥—É–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã)   | `module-ai-docs.md`  | ‚úÖ Simple packages (modular units) |
| **.cursor/docs/ai-package-template.md** | Packages with package.json | `package-ai-docs.md` | ‚úÖ Complex packages (workspace packages)  |

</terminology_mapping>

## üß≠ TIER 4: Proper Application

<application_rules>

### When to use module-ai-docs.md

‚úÖ **Simple packages (modular units):**

```text
shared/lib/hooks/use-safe-back/
‚îú‚îÄ‚îÄ index.ts                    # –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ + —Ñ–∞—Å–∞–¥
‚îú‚îÄ‚îÄ types.ts                    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ç–∏–ø—ã
‚îú‚îÄ‚îÄ helpers.ts                  # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚îî‚îÄ‚îÄ module-ai-docs.md         # üéØ AI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–æ–¥—É–ª—è
```

‚úÖ **Individual slices in complex packages:**

```text
features/user/auth/
‚îú‚îÄ‚îÄ ui/auth-form/index.tsx
‚îú‚îÄ‚îÄ model/store/index.ts
‚îú‚îÄ‚îÄ service/auth-api/index.ts
‚îú‚îÄ‚îÄ index.ts                    # –§–∞—Å–∞–¥ —Å–ª–∞–π—Å–∞
‚îî‚îÄ‚îÄ module-ai-docs.md         # üéØ AI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–ª–∞–π—Å–∞
```

### When to use package-ai-docs.md

‚úÖ **Complex packages (workspace level):**

```text
executables/mcp-validator/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îî‚îÄ‚îÄ lib/
‚îú‚îÄ‚îÄ package.json               # –ü—Ä–∏–∑–Ω–∞–∫ –ø–∞–∫–µ—Ç–∞
‚îî‚îÄ‚îÄ package-ai-docs.md              # üéØ AI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞
```

‚úÖ **FSD layers as packages:**

```text
shared/
‚îú‚îÄ‚îÄ api/
‚îú‚îÄ‚îÄ ui/
‚îú‚îÄ‚îÄ lib/
‚îú‚îÄ‚îÄ model/
‚îî‚îÄ‚îÄ package-ai-docs.md              # üéØ AI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤—Å–µ–≥–æ shared
```

</application_rules>

## üß© TIER 5: Reference Links

<references>
- **CRITICAL - READ BEFORE GENERATION:**
  - `.cursor/docs/ai-package-template.md` - package documentation template
  - `.cursor/docs/ai-module-template.md` - module documentation template
- **ADDITIONALLY:** Study architectural principles: `.cursor/docs/architecture.md`
- **XML ARCHITECTURE GENERATION:** For creating/updating `architecture.xml` files referenced by `package-ai-docs.md`, use prompt `.cursor/docs/generate-architecture-xml.md`.

**‚ö†Ô∏è WARNING: Documentation generation WITHOUT reading references is FORBIDDEN!**
</references>

## ü™¢ TIER 6: Terminology Conflicts and Resolution

<conflicts_and_resolution>

### Term "module" is used differently

‚Äî In module AI documentation, "modular unit" (–º–æ–¥—É–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞) corresponds to architectural modular unit
‚Äî In package AI documentation, "module" = architectural grouping within package (e.g., `services`, `lib`, `model`)

### Conflict Resolution

‚Äî In module AI documentation, use term "modular unit" (–º–æ–¥—É–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞)
‚Äî In package AI documentation, use "architectural module" (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –º–æ–¥—É–ª—å)

</conflicts_and_resolution>

## üßÆ TIER 7: Documentation Selection and Generation Algorithm

<selection_algorithm>

1. Has `package.json`? ‚Üí `package-ai-docs.md` (package documentation)
2. Single function/component in folder? ‚Üí `module-ai-docs.md` (module documentation)
3. Multiple related functions in folder with facade? ‚Üí `module-ai-docs.md`
4. Large FSD layer (`shared`, `features`) ‚Üí `package-ai-docs.md`
5. If `package-ai-docs.md` has `module_docs`, create `module-ai-docs.md` according to specified `type/rule/targets`

</selection_algorithm>

## üßæ TIER 3: Output Format

<output_format>
This is a reference prompt for integrating AI docs with architecture. Expected model output consists of the following sections in Markdown, using XML tags as shown:

**üö® MANDATORY FIRST STEP:**

- Read `.cursor/docs/ai-package-template.md` and `.cursor/docs/ai-module-template.md`
- Study structure, YAML metadata, and XML tags from references

**Then generate:**

- `<terminology_mapping>` ‚Äî unified terminology dictionary
- `<application_rules>` ‚Äî document type selection rules
- `<module_docs_yaml>` ‚Äî `module_docs` YAML policy samples
- `<conflicts_and_resolution>` ‚Äî common conflicts and resolutions
- `<selection_algorithm>` ‚Äî step-by-step selection algorithm
- `<conclusion>` ‚Äî brief conclusions

**Note:** All user-facing responses must be in Russian.
</output_format>

## ‚úÖ TIER 8: Conclusion

<conclusion>
AI documentation is compatible with architecture when `module_docs` is correctly configured and terminology is followed:

- `module-ai-docs.md` ‚Üî "modular units" (–º–æ–¥—É–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã) - simple packages, slices
- `package-ai-docs.md` ‚Üî "complex packages" (—Å–ª–æ–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã) - FSD structures, workspace packages

Terminology is unified: for module documentation ‚Äî "modular unit" (–º–æ–¥—É–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞), for package documentation ‚Äî "architectural module/package" (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –º–æ–¥—É–ª—å/–ø–∞–∫–µ—Ç).
</conclusion>

## üìè TIER 9: Completion Criteria

<completion_criteria>

- Terminology is aligned and documented in `<terminology_mapping>`
- Correct document type is selected for all cases (`module-ai-docs.md` or `package-ai-docs.md`)
- `module_docs` policy is described and applicable to project
- Terminology conflicts are resolved with explicit clarifications
- Document passes MCP validation with score ‚â•85

</completion_criteria>

[REFERENCE-END]
