---
id: agent-mode-workflow
type: compact
response_language: ru
alwaysApply: false
---

# Agent Mode Workflow

<agent_mode_workflow>

**INSTANT EXECUTION - AUTONOMOUS AGENT MODE**

**ВАЖНО: Все ответы должны быть на русском языке.**

<mode_check>
**CRITICAL CHECK:** This prompt works ONLY in Agent Mode!

If NOT in Agent Mode (system_reminder does NOT contain plan execution context):

- SKIP this entire prompt completely
- DO NOT apply agent-mode-workflow logic
- USE other mode dispatchers instead

**NO EXCEPTIONS:** This workflow is FORBIDDEN outside Agent Mode!
</mode_check>

**PLAN-FIRST EXECUTION (MANDATORY):**

If plan exists (from create_plan tool):

1. Read plan todos sequentially
2. Follow plan as source of truth
3. Execute todos in order
4. Report progress after each todo
5. Deviate only on explicit user request

**DOCUMENTATION REQUIREMENT (for code tasks):**

Before writing ANY code, read in order:

1. `.cursor/docs/naming.md` → naming conventions
2. `.cursor/docs/code-standards.md` → code style rules
3. `.cursor/docs/testing.md` → test requirements

**ACTIVITY-SPECIFIC HINTS:**

**Code Development:** Functional style, one function/file, guard clauses, array methods, 100% tests → `.cursor/rules/02-quick-ts-workflow.mdc`

**UI Development:** Browser testing, CSS rendering, responsive viewports, keyboard/focus, accessibility (ARIA)

**Auxiliary Development:** Deploy/infra scripts, document setup, test isolated environment

**Technical Critique:** Analyze quality, identify architectural issues, suggest improvements, check standards

**Prompt Engineering:** Follow `.cursor/rules/prompt-workflow.mdc`, MCP ≥85, compact for routing, algorithm for workflows

**AI Documentation:** Machine-readable YAML, structured metadata, reference `.cursor/docs/` patterns

**VALIDATION DISCIPLINE (MANDATORY):**

After EACH file modification:

1. Call `mcp_mcp-validator_validate` immediately
2. Use `validationType: 'code'` for source files
3. Use `validationType: 'tests'` for test files
4. Use `validationType: 'prompts'` for .mdc files
5. Target score ≥85 for every file
6. If score < 85 → fix issues and re-validate
7. Do NOT proceed to next file until score ≥85

**FINAL VERIFICATION (before completion):**

Run verification commands:

1. Linters: `yarn lint` or `npm run lint` → 0 errors required
2. Type check: `tsc --noEmit` → 0 errors required
3. Tests: `yarn test` or `npm test` → 100% pass required
4. Fix ALL issues before marking task complete

**ALGORITHM:**

1. **Check for plan** → if exists, follow todos sequentially
2. **Read documentation** → if code task, read naming.md, code-standards.md, testing.md
3. **Execute with hints** → apply activity-specific guidance
4. **Validate each file** → mcp_validator after every modification (≥85)
5. **Final checks** → run linters and tests, fix all errors
6. **Report completion** → summarize changes, validation results

**FALLBACKS:**

- Plan unavailable → analyze user request, break into steps, execute
- Documentation files missing → use TypeScript/React best practices
- MCP validator unavailable → run lint + typecheck + tests as fallback
- Validation fails → iterate fixes up to 5 times, then simplify approach
- Tests fail → debug, fix logic, update tests, re-run
- Task unclear → ask 1-2 clarifying questions before proceeding

<completion_criteria>
**SUCCESS:** All todos completed ✓ All validations passed ✓ Linters 0 errors ✓ Tests 100% pass
**FAILURE:** Validation score < 85 or linter errors or test failures → iterate fixes
</completion_criteria>

</agent_mode_workflow>
