---
id: rules-catalog
type: reference
use_cases: ['workspace rules access', 'ai self-navigation', 'cursor rules and docs lookup']
prompt_language: en
response_language: ru
alwaysApply: false
---

# Cursor Rules и Docs Справочник

[REFERENCE-BEGIN]

## Rules Files (.cursor/rules/)

1. **01-rules-navigator.mdc**
    - **Description:** Lightweight navigation helper for quick access to rules and docs. Minimal reference for AI self-navigation without loading full catalog. Compact prompt with self-access rule.
    - **Relative Path:** `.cursor/rules/01-rules-navigator.mdc`
    - **When to read:** Automatically applied (alwaysApply: true). When you need quick reference to available rules/docs without detailed descriptions.

2. **02-code-standards-compact.mdc**
    - **Description:** Compact code standards enforcement with critical rules: one file = one function, guard clauses, array methods, explicit comparisons, no classes, JSDoc (Russian), ESM-only. Includes absolute bans list and import/export rules.
    - **Relative Path:** `.cursor/rules/02-code-standards-compact.mdc`
    - **When to read:** Automatically applied (alwaysApply: true) for instant code quality enforcement. References `.cursor/docs/code-standards.md` for detailed examples.

3. **03-naming-compact.mdc**
    - **Description:** Compact naming conventions quick reference: kebab-case files, PascalCase components, camelCase functions, SCREAMING_SNAKE_CASE constants. Includes test naming (Russian) and no default exports rule.
    - **Relative Path:** `.cursor/rules/03-naming-compact.mdc`
    - **When to read:** Automatically applied (alwaysApply: true) for consistent naming enforcement. References `.cursor/docs/naming.md` for detailed examples.

4. **04-agent-mode-workflow.mdc**
    - **Description:** Compact prompt with Agent Mode execution algorithm: plan → documentation → execution → validation (MCP ≥85) → final verification (lint/tests). Includes mode check to skip when not in Agent Mode.
    - **Relative Path:** `.cursor/rules/04-agent-mode-workflow.mdc`
    - **When to read:** Automatically applied (alwaysApply: true) in Agent Mode for systematic validation and quality gates.

5. **05-chat-mode-router.mdc**
    - **Description:** Compact prompt for instant chat mode detection (Plan/Agent/Ask/Custom Ask/Other) and automatic reading of corresponding dispatcher files. Emergency priority execution with blocking checks.
    - **Relative Path:** `.cursor/rules/05-chat-mode-router.mdc`
    - **When to read:** Automatically applied (alwaysApply: true), triggers appropriate mode dispatcher based on system context.

6. **ai-docs-workflow.mdc**
    - **Description:** Reference workflow for AI documentation integration with architectural rules. Aligns AI documentation practices with project architecture (FSD, packages, module units), terminology unification, and YAML policies.
    - **Relative Path:** `.cursor/rules/ai-docs-workflow.mdc`
    - **When to read:** When creating or updating AI documentation (package-ai-docs.md, module-ai-docs.md) that needs alignment with architecture rules.

7. **ask-mode-workflow.mdc**
    - **Description:** Compact prompt for Ask Mode (read-only): analysis → question formulation → project context → deep analysis → verification (web_search/context7/browser) → answer. References `.cursor/docs/numbering-system.md` for task notation.
    - **Relative Path:** `.cursor/rules/ask-mode-workflow.mdc`
    - **When to read:** When in Ask Mode for analysis, recommendations, and information gathering without file modifications.

8. **auxiliary-code-workflow.mdc**
    - **Description:** Algorithm workflow for auxiliary/side development tasks that are NOT part of the main project architecture (VPN setup, deployment scripts, VDS configuration, automation tools, cloud setup). Enforces mandatory verification through web search for current best practices and MCP Context7 for package versions, with OS/device compatibility validation (macOS ARM64, Linux, Windows). Includes aggressive requirement gathering in Plan Mode and fallback to code-workflow.mdc if task is actually main project work.
    - **Relative Path:** `.cursor/rules/auxiliary-code-workflow.mdc`
    - **When to read:** When handling infrastructure setup, deployment automation, system configuration, tooling development, or any development task that exists outside the main project codebase. NOT for tasks that modify project files or integrate into project architecture.

9. **critique-workflow.mdc**
    - **Description:** Algorithm workflow for technical critique and validation. Elite Principal Tech Reviewer for code review, architectural analysis, and technical idea validation. Includes Plan Mode with clarifying questions and Execution Mode with 7-step analysis.
    - **Relative Path:** `.cursor/rules/critique-workflow.mdc`
    - **When to read:** For tasks requiring review, feedback, or quality assessment of code, concepts, or technical ideas.

10. **detailed-plan-creator.mdc**
    - **Description:** Algorithm workflow for creating detailed implementation plans for complex tasks. Comprehensive planning with architecture design, module structure definition, and step-by-step implementation roadmap. Creates plans via Cursor's create_plan tool with todos and dependencies.
    - **Relative Path:** `.cursor/rules/detailed-plan-creator.mdc`
    - **When to read:** When planning complex features that require careful decomposition, architecture design, multiple components, or phased execution with validation gates.

11. **code-workflow.mdc**
    - **Description:** Algorithm workflow for advanced planning mode with architecture validation. Structured preparation workflow with quality gate enforcement before plan creation. Includes XML architecture validation through MCP with ≥85 score requirement.
    - **Relative Path:** `.cursor/rules/code-workflow.mdc`
    - **When to read:** When planning complex projects requiring architecture validation and systematic preparation.

12. **jira-task-creator.mdc**
    - **Description:** Algorithm workflow for interactive JIRA task creation with requirements gathering, solution validation (web search + Context7), and wiki markup generation. Outputs copy-ready JIRA task description in Cursor plan.
    - **Relative Path:** `.cursor/rules/jira-task-creator.mdc`
    - **When to read:** When creating JIRA tasks that are actionable and ready for copy-paste, including for breaking down larger initiatives into JIRA-sized work items.

13. **plan-mode-dispatcher.mdc**
    - **Description:** Combo prompt (algorithm + reference) for Plan Mode task classification and workflow routing. Meta-classifier for lightning-fast activity type determination with classification table and immediate workflow file reading.
    - **Relative Path:** `.cursor/rules/plan-mode-dispatcher.mdc`
    - **When to read:** Automatically applied (alwaysApply: true) in Plan Mode, triggers activity type classification and corresponding workflow routing.

14. **prompt-workflow.mdc**
    - **Description:** Combo prompt (algorithm + reference) for prompt engineering. Creates production-ready AI prompts with XML structuring, YAML metadata, and MCP validation (score ≥85). Supports algorithm/reference/combo/compact/command types.
    - **Relative Path:** `.cursor/rules/prompt-workflow.mdc`
    - **When to read:** When the task involves creating, improving, editing, or validating AI prompts.

15. **ui-workflow.mdc**
    - **Description:** Algorithm workflow for UI planning with browser validation using Playwright MCP tools. Identifies visual problems through browser inspection, clarifies user requirements interactively, creates detailed plans with browser verification checkpoints. Uses package.json and package-ai-docs.md for launch instructions.
    - **Relative Path:** `.cursor/rules/ui-workflow.mdc`
    - **When to read:** When fixing visual/UI problems, validating design implementation, checking responsive layouts, or planning UI improvements through browser-based analysis.

### Docs Files (.cursor/docs/)

1. **rules-catalog.mdc**
    - **Description:** Complete catalog of all rules and docs with detailed descriptions and usage instructions. Use this for comprehensive overview of the .cursor rules setup.
    - **Relative Path:** `.cursor/docs/rules-catalog.mdc` (current file)
    - **When to read:** If you need meta-information about how rules are structured or managed, or want to browse all available rules and docs.

2. **ai-module-template.md**
    - **Description:** Template and reference for documenting module units (модульные единицы) in TypeScript projects, including YAML metadata, XML structure, and examples.
    - **Relative Path:** `.cursor/docs/ai-module-template.md`
    - **When to read:** When creating or updating AI documentation for individual modules.

3. **ai-package-template.md**
    - **Description:** Template and reference for package-level AI documentation (package-ai-docs.md), including module_docs policy, architecture types, and development commands.
    - **Relative Path:** `.cursor/docs/ai-package-template.md`
    - **When to read:** When documenting entire packages or setting up AI docs workflows.

4. **architecture.md**
    - **Description:** General architecture principles and overview for the project.
    - **Relative Path:** `.cursor/docs/architecture.md`
    - **When to read:** For overall project architecture guidance.

5. **code-standards.md**
    - **Description:** Coding standards, style rules, and quality guidelines.
    - **Relative Path:** `.cursor/docs/code-standards.md`
    - **When to read:** When applying code style or quality checks.

6. **generate-architecture-xml.md**
    - **Description:** Workflow for generating XML architecture files for validation.
    - **Relative Path:** `.cursor/docs/generate-architecture-xml.md`
    - **When to read:** When creating or updating architecture XML schemas.

7. **naming.md**
    - **Description:** Naming conventions for files, functions, variables, and modules.
    - **Relative Path:** `.cursor/docs/naming.md`
    - **When to read:** For consistent naming in code.

8. **testing.md**
    - **Description:** Testing best practices, patterns, and guidelines.
    - **Relative Path:** `.cursor/docs/testing.md`
    - **When to read:** When writing or reviewing tests.

9. **numbering-system.md**
    - **Description:** Notation rules and semantics for hierarchical task numbering (Phase/Step/Task/Block) with modifiers (Run/Variant/Concurrent/Fallback).
    - **Relative Path:** `.cursor/docs/numbering-system.md`
    - **When to read:** When working with structured task decomposition or hierarchical planning systems.

10. **architecture-fsd-domain.md**
    - **Description:** FSD Domain architecture reference for large frontend applications with business domain separation (user, payments, betting).
    - **Relative Path:** `.cursor/docs/architecture-fsd-domain.md`
    - **When to read:** When working with Feature-Sliced Design projects requiring domain-driven structure.

11. **architecture-fsd-standard.md**
    - **Description:** FSD Standard architecture reference for medium-complexity frontend applications without domain grouping.
    - **Relative Path:** `.cursor/docs/architecture-fsd-standard.md`
    - **When to read:** When working with standard Feature-Sliced Design projects.

12. **architecture-layered-library.md**
    - **Description:** Layered Library architecture for multi-module packages (UI libraries, API clients, utility packages) with thematic layer grouping.
    - **Relative Path:** `.cursor/docs/architecture-layered-library.md`
    - **When to read:** When building shared libraries or multi-module packages.

13. **architecture-server-fsd.md**
    - **Description:** Server FSD architecture for backend applications with adapted layer naming (controllers, services, models).
    - **Relative Path:** `.cursor/docs/architecture-server-fsd.md`
    - **When to read:** When working with backend/server-side TypeScript projects using FSD principles.

14. **architecture-single-module.md**
    - **Description:** Single Module architecture for simple projects (utilities, hooks, validators) with minimal structure and facade pattern.
    - **Relative Path:** `.cursor/docs/architecture-single-module.md`
    - **When to read:** When building simple single-purpose modules or utilities.

15. **architecture-multi-app-monolith.md**
    - **Description:** Multi App Monolith architecture for fullstack monorepos with multiple isolated applications and shared common layer.
    - **Relative Path:** `.cursor/docs/architecture-multi-app-monolith.md`
    - **When to read:** When working with monorepo projects containing multiple applications.

## Usage Instructions

- **Self-Access Rule:** Always prefer reading these files yourself using the read_file tool with absolute paths before asking the user about rules or docs.
- **Relative Paths:** Provided for navigation; convert to absolute for tool calls.
- **Update Note:** This справочник is a snapshot; if new files are added, update it accordingly.
- **Quick Access:** Use `rules-navigator.mdc` for lightweight navigation instead of loading this full catalog.

<completion_criteria>
Справочник accessed and relevant file read if needed; task proceeds with rules and docs applied.
</completion_criteria>

[REFERENCE-END]
